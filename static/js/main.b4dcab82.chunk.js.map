{"version":3,"sources":["visualizer/Graph/BarChart.js","visualizer/Graph/ChartContainer.js","visualizer/Selector/DistributionDropdown.js","visualizer/Selector/DistributionSelector.js","visualizer/Selector/Parser.js","visualizer/TimeGraph/TimeGraph.js","visualizer/TimeBeforeChange/TimeBeforeChange.js","Menu/VisualizerMenu.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","_this$props","this","props","data","lineData","title","react_default","a","createElement","className","es","height","width","xType","barWidth","map","arr","color","Component","ChartContainer","transformed","intervalLines","Object","keys","sort","subtitle","Graph_BarChart","DistributionDropdown","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","options","key","text","value","state","handleChange","bind","assertThisInitialized","event","setState","target","onChange","DistributionSelector","option","frequencyDistribution","undefined","timeFrequencyDistribution","timeGroupedFrequencyDistribution","onlineFrequencyDistribution","onlineTimeFrequencyDistribution","onlineTimeGroupedFrequencyDistribution","setOption","transformData","_this2","fetch","process","then","r","json","parsed","distribution","console","log","output","forEach","signalGroup","signalPhase","duration","push","x","y","frequencyDistributionParser","normal","cumulative","year","month","day","hour","minutes","timeFrequencyDistributionParser","isWeekend","timeGroupedFrequencyDistributionParser","transformedData","counter","maxX","minX","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","item","Number","parseInt","err","return","interval95","minLine","maxLine","Selector_DistributionDropdown","Graph_ChartContainer","TimeGraph","showSeriesOnly","onSeriesClick","onResetClick","result","sg","sf","_transformData","series","newdata","Date","_this3","_this$state","onClick","opacity","TimeBeforeChange","distributionType","predictionType","abs_e_result_time_list","size","VisualizerMenu","direction","TimeGraph_TimeGraph","Selector_DistributionSelector","TimeBeforeChange_TimeBeforeChange","App","VisualizerMenu_VisualizerMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4dcab82.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, VerticalBarSeries, LineSeries, HorizontalGridLines, XAxis, YAxis} from 'react-vis';\r\n\r\nclass BarChart extends Component {\r\n\r\n    render() {\r\n        const {data, lineData, title} = this.props;\r\n        return (\r\n            <div className=\"BarChart\">\r\n                <p>{title}</p>\r\n                <XYPlot height={300} width={1000} xType={\"ordinal\"}>\r\n                    <HorizontalGridLines />\r\n                    <VerticalBarSeries data={data} barWidth={0.95}/>\r\n                    {lineData && lineData.map((arr) => { return <LineSeries data={arr} color=\"red\"/>})}\r\n                    <XAxis title={\"Duration (s)\"}/>\r\n                    <YAxis title={lineData ? \"Cumulative frequency\" : \"Frequency\"}/>\r\n                </XYPlot>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarChart;","import React, { Component } from 'react';\r\nimport BarChart from \"./BarChart\";\r\n\r\nclass ChartContainer extends Component {\r\n\r\n    render() {\r\n        let {data, transformed, intervalLines} = this.props;\r\n        return (\r\n            <div className=\"ChartContainer \">\r\n                {Object.keys(data).sort().map((title) => {return Object.keys(data[title]).sort().map((subtitle) =>{\r\n                    return (\r\n                        <div className=\"ChartContainer_duo\">\r\n                            <BarChart data={data[title][subtitle]} title={title+\" \"+subtitle}/>\r\n                            <BarChart data={transformed[title][subtitle]} lineData={intervalLines[title][subtitle]} title={\"cumulative\"}/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartContainer;","import React, { Component } from 'react';\r\n\r\nclass DistributionDropdown extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: this.options[0].value,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    options = [\r\n        {\r\n            key: 'frequencyDistribution',\r\n            text: 'Local: Dataset not grouped in time',\r\n            value: 0\r\n        },\r\n        {\r\n            key: 'timeGroupedFrequencyDistribution',\r\n            text: 'Local: Dataset grouped by weekend of weekday and hours',\r\n            value: 1\r\n        },\r\n        {\r\n            key: 'timeFrequencyDistribution',\r\n            text: 'Local: Dataset grouped every 20 minutes',\r\n            value: 2\r\n        },\r\n        // {\r\n        //     key: 'onlineFrequencyDistribution',\r\n        //     text: 'Online: Dataset not grouped in time',\r\n        //     value: 3\r\n        // },\r\n        // {\r\n        //     key: 'onlineTimeGroupedFrequencyDistribution',\r\n        //     text: 'Online: Dataset grouped by weekend of weekday and hours',\r\n        //     value: 4\r\n        // },\r\n        // {\r\n        //     key: 'onlineTimeFrequencyDistribution',\r\n        //     text: 'Online: Dataset grouped every 20 minutes',\r\n        //     value: 5\r\n        // }\r\n    ];\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n        this.props.onChange(event.target.value);\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <select value={this.state.value} onChange={this.handleChange}>\r\n                <option value={this.options[0].key}>{this.options[0].text}</option>\r\n                <option value={this.options[1].key}>{this.options[1].text}</option>\r\n                <option value={this.options[2].key}>{this.options[2].text}</option>\r\n                {/*<option value={this.options[3].key}>{this.options[3].text}</option>*/}\r\n                {/*<option value={this.options[4].key}>{this.options[4].text}</option>*/}\r\n                {/*<option value={this.options[5].key}>{this.options[5].text}</option>*/}\r\n            </select>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DistributionDropdown;","import React, { Component } from 'react';\r\nimport ChartContainer from \"../Graph/ChartContainer\";\r\nimport DistributionDropdown from \"./DistributionDropdown\";\r\nimport {frequencyDistributionParser, timeFrequencyDistributionParser, timeGroupedFrequencyDistributionParser} from \"./Parser.js\";\r\n\r\nclass DistributionSelector extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            option: \"frequencyDistribution\",\r\n            frequencyDistribution: undefined,\r\n            timeFrequencyDistribution: undefined,\r\n            timeGroupedFrequencyDistribution: undefined,\r\n            onlineFrequencyDistribution: undefined,\r\n            onlineTimeFrequencyDistribution: undefined,\r\n            onlineTimeGroupedFrequencyDistribution: undefined,\r\n        };\r\n        this.setOption = this.setOption.bind(this);\r\n        this.transformData = this.transformData.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(process.env.PUBLIC_URL + \"/Data/frequencyDistribution.json\")\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let parsed = frequencyDistributionParser(data);\r\n                this.setState({\r\n                    frequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n                });\r\n            });\r\n        fetch(process.env.PUBLIC_URL + \"/Data/timeFrequencyDistribution.json\")\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let parsed = timeFrequencyDistributionParser(data);\r\n                this.setState({\r\n                    timeFrequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n                });\r\n            });\r\n        fetch(process.env.PUBLIC_URL + \"/Data/timeGroupedFrequencyDistribution.json\")\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let parsed = timeGroupedFrequencyDistributionParser(data);\r\n                this.setState({\r\n                    timeGroupedFrequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n                });\r\n            });\r\n        // fetch(\"http://localhost:8080/distribution/fd\")\r\n        //     .then(r => r.json())\r\n        //     .then(data => {\r\n        //         let parsed = frequencyDistributionParser(data);\r\n        //         this.setState({\r\n        //             onlineFrequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n        //         });\r\n        //     });\r\n        // fetch(\"http://localhost:8080/distribution/tfd\")\r\n        //     .then(r => r.json())\r\n        //     .then(data => {\r\n        //         let parsed = timeFrequencyDistributionParser(data);\r\n        //         this.setState({\r\n        //             onlineTimeFrequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n        //         });\r\n        //     });\r\n        // fetch(\"http://localhost:8080/distribution/tgfd\")\r\n        //     .then(r => r.json())\r\n        //     .then(data => {\r\n        //         let parsed = timeGroupedFrequencyDistributionParser(data);\r\n        //         this.setState({\r\n        //             onlineTimeGroupedFrequencyDistribution: {normal: parsed, cumulative: this.transformData(parsed)}\r\n        //         });\r\n        //     });\r\n    }\r\n\r\n    setOption(option){\r\n        this.setState({\r\n            option: option\r\n        });\r\n    }\r\n\r\n    transformData(data){\r\n        let transformedData = {};\r\n        let intervalLines = {};\r\n        Object.keys(data).forEach((title) => {\r\n            if(!transformedData[title]){\r\n                transformedData[title] = {};\r\n            }\r\n            if(!intervalLines[title]){\r\n                intervalLines[title] = {};\r\n            }\r\n            Object.keys(data[title]).forEach((subtitle) => {\r\n                if(!transformedData[title][subtitle]){\r\n                    transformedData[title][subtitle] = [];\r\n                }\r\n                if(!intervalLines[title][subtitle]){\r\n                    intervalLines[title][subtitle] = [];\r\n                }\r\n                let counter = 0;\r\n                let maxX = undefined;\r\n                let minX = undefined;\r\n                for(let item of data[title][subtitle]){\r\n                    let x = Number.parseInt(item.x, 10);\r\n                    let y = item.y;\r\n                    counter+=y;\r\n                    transformedData[title][subtitle].push({ x: x, y: counter});\r\n                    if(maxX === undefined || x > maxX){\r\n                        maxX = x;\r\n                    }\r\n                    if(minX === undefined || x < minX){\r\n                        minX = x;\r\n                    }\r\n                }\r\n                let interval95 = counter * 0.05;\r\n                let minLine = [{x: minX, y: interval95}, {x: maxX, y: interval95}];\r\n                let maxLine = [{x: minX, y: counter-interval95},{x: maxX, y: counter-interval95}];\r\n                intervalLines[title][subtitle].push(minLine);\r\n                intervalLines[title][subtitle].push(maxLine);\r\n            });\r\n        });\r\n        return [transformedData, intervalLines];\r\n    }\r\n\r\n    render() {\r\n        // let {option, frequencyDistribution, timeFrequencyDistribution, timeGroupedFrequencyDistribution} = this.state;\r\n        // let data;\r\n        // if(option === \"frequencyDistribution\"){\r\n        //     data = frequencyDistribution;\r\n        // }\r\n        // else if(option === \"timeGroupedFrequencyDistribution\"){\r\n        //     data = timeGroupedFrequencyDistribution;\r\n        // }\r\n        // else if(option === \"timeFrequencyDistribution\"){\r\n        //     data = timeFrequencyDistribution;\r\n        // }\r\n        let { option } = this.state;\r\n        let data = this.state[option];\r\n        console.log(data);\r\n        if(!data){\r\n            return (\r\n                <div>\r\n                    <DistributionDropdown onChange={this.setOption}/>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"DistributionSelector\">\r\n                <DistributionDropdown onChange={this.setOption}/>\r\n                <header className=\"App-header\">\r\n                    <ChartContainer data={data.normal} transformed={data.cumulative[0]} intervalLines={data.cumulative[1]}/>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DistributionSelector;","export function timeGroupedFrequencyDistributionParser(distribution) {\r\n    console.log(\"tgfd parser started\");\r\n    let output = {};\r\n    Object.keys(distribution).forEach((signalGroup) => {\r\n        output[signalGroup] = {};\r\n        Object.keys(distribution[signalGroup]).forEach((signalPhase) => {\r\n            Object.keys(distribution[signalGroup][signalPhase]).forEach((isWeekend) => {\r\n                Object.keys(distribution[signalGroup][signalPhase][isWeekend]).forEach((hour) => {\r\n                    let subtitle =signalPhase+ \" hour: \"+hour;\r\n                    if(isWeekend === \"1\" ){\r\n                        subtitle+=\" on weekend\";\r\n                    }\r\n                    else{\r\n                        subtitle+=\" on weekday\";\r\n                    }\r\n                    output[signalGroup][subtitle] = [];\r\n                    Object.keys(distribution[signalGroup][signalPhase][isWeekend][hour]).forEach((duration) => {\r\n                        output[signalGroup][subtitle].push({x: duration, y: distribution[signalGroup][signalPhase][isWeekend][hour][duration]});\r\n                    })\r\n                })\r\n            });\r\n        });\r\n    });\r\n    console.log(\"tgfd parser ended\");\r\n    return output;\r\n}\r\n\r\nexport function timeFrequencyDistributionParser(distribution) {\r\n    console.log(\"tfd parser started\");\r\n    let output = [];\r\n    Object.keys(distribution).forEach((signalGroup) => {\r\n        output[signalGroup] = {};\r\n        Object.keys(distribution[signalGroup]).forEach((signalPhase) => {\r\n            Object.keys(distribution[signalGroup][signalPhase]).forEach((year) => {\r\n                Object.keys(distribution[signalGroup][signalPhase][year]).forEach((month) => {\r\n                    Object.keys(distribution[signalGroup][signalPhase][year][month]).forEach((day) => {\r\n                        Object.keys(distribution[signalGroup][signalPhase][year][month][day]).forEach((hour) => {\r\n                            Object.keys(distribution[signalGroup][signalPhase][year][month][day][hour]).forEach((minutes) => {\r\n                                let subtitle = signalPhase+\" \"+year+\"-\"+month+\"-\"+day+\" \"+hour+\"h third: \"+minutes;\r\n                                output[signalGroup][subtitle] = [];\r\n                                Object.keys(distribution[signalGroup][signalPhase][year][month][day][hour][minutes]).forEach((duration) => {\r\n                                    output[signalGroup][subtitle].push({x: duration, y: distribution[signalGroup][signalPhase][year][month][day][hour][minutes][duration]});\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n    console.log(\"tfd parser ended\");\r\n    return output;\r\n}\r\n\r\nexport function frequencyDistributionParser(distribution) {\r\n    console.log(\"fd parser started\");\r\n    let output = {};\r\n    Object.keys(distribution).forEach((signalGroup) => {\r\n        output[signalGroup] = {};\r\n        Object.keys(distribution[signalGroup]).forEach((signalPhase) => {\r\n            output[signalGroup][signalPhase] = [];\r\n            Object.keys(distribution[signalGroup][signalPhase]).forEach((duration) => {\r\n                output[signalGroup][signalPhase].push({x: duration, y: distribution[signalGroup][signalPhase][duration]});\r\n            });\r\n        });\r\n    });\r\n    console.log(\"fd parser ended\");\r\n    return output;\r\n}","import React, { Component } from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, LineMarkSeries, HorizontalGridLines, XAxis, YAxis} from 'react-vis';\r\n\r\nexport default class TimeGraph extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: undefined,\r\n            showSeriesOnly: undefined\r\n        };\r\n        this.onSeriesClick = this.onSeriesClick.bind(this);\r\n        this.onResetClick = this.onResetClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(process.env.PUBLIC_URL + \"/Data/durations_latest.json\") //optionally fetch \"http://localhost:8081/durations\" if local OpenTrafficLightsPrediction server is running TestSuite ShowPhaseDurationOverTime\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                let result = {};\r\n                Object.keys(data).forEach((sg)=> {\r\n                    if(!result[sg]){\r\n                        result[sg] = {};\r\n                    }\r\n                    Object.keys(data[sg]).forEach((sf) => {\r\n                       result[sg][sf] = this._transformData(data[sg][sf]);\r\n                    })\r\n                });\r\n                this.setState({\r\n                    data: result,\r\n                });\r\n            });\r\n    }\r\n\r\n    onSeriesClick(series){\r\n        this.setState({\r\n            showSeriesOnly: series,\r\n        });\r\n    }\r\n\r\n    onResetClick(){\r\n        this.setState({\r\n            showSeriesOnly: undefined,\r\n        });\r\n    }\r\n\r\n    _transformData(data){\r\n        let newdata = [];\r\n        for(let item of data){\r\n            item.y < 200 && newdata.push({x: new Date(item.x), y: item.y});\r\n        }\r\n        return newdata;\r\n    }\r\n\r\n    render() {\r\n        let {data, showSeriesOnly} = this.state;\r\n        return <div><button onClick={this.onResetClick}>Reset Graph</button>{showSeriesOnly && <div>{showSeriesOnly}</div>}<XYPlot height={1000} width={1600} xType={\"time\"} >\r\n            <HorizontalGridLines />\r\n            {data && Object.keys(data).sort().map((title) => {return Object.keys(data[title]).sort().map((subtitle) =>{\r\n                // if(showSeriesOnly === undefined){\r\n                //     return (\r\n                //         <LineMarkSeries data={data[title][subtitle]} onSeriesClick={(event) => {this.onSeriesClick(title+\" \"+subtitle)}} />\r\n                //     )\r\n                // }\r\n                // else if(showSeriesOnly === title+\" \"+subtitle){\r\n                //     return (\r\n                //         <LineMarkSeries data={data[title][subtitle]} onSeriesClick={(event) => {this.onSeriesClick(title+\" \"+subtitle)}} />\r\n                //     )\r\n                // }\r\n                return (\r\n                    <LineMarkSeries data={data[title][subtitle]} onSeriesClick={(event) => {this.onSeriesClick(title+\" \"+subtitle)}} opacity={showSeriesOnly ? showSeriesOnly === title+\" \"+subtitle ? 1 : 0.1 : 1} />\r\n                )\r\n            })})}\r\n            <XAxis title={\"Time\"}/>\r\n            <YAxis title={\"Duration (s)\"}/>\r\n        </XYPlot></div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../../../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, LineMarkSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis} from 'react-vis';\r\n\r\nexport default class TimeBeforeChange extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(process.env.PUBLIC_URL + \"/Data/full_previous_testsuite_run.json\") //optionally fetch \"http://localhost:8080/analytics\" if local OpenTrafficLightsPrediction server is running TestSuite\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    data: data,\r\n                });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let {data} = this.state;\r\n        if(!data){\r\n            return (\r\n                <div>\r\n                    waiting\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {\r\n                    Object.keys(data).map((signalGroup) => {\r\n                        return Object.keys(data[signalGroup]).map((signalPhase) => {\r\n                            return Object.keys(data[signalGroup][signalPhase]).map((distributionType) => {\r\n                                return Object.keys(data[signalGroup][signalPhase][distributionType]).map((predictionType) => {\r\n                                    // if(distributionType !== \"tfd\" || predictionType !== \"median\"){\r\n                                    //     return null;\r\n                                    // }\r\n                                    if( !data[signalGroup][signalPhase][distributionType][predictionType].abs_e_result_time_list){\r\n                                        return null;\r\n                                    }\r\n                                    let transformed = [];\r\n                                    data[signalGroup][signalPhase][distributionType][predictionType].abs_e_result_time_list.forEach((item) => {\r\n                                        item.x = Number.parseInt(item.x, 10);\r\n                                       if(item.x < 200){\r\n                                           transformed.push(item);\r\n                                       }\r\n                                    });\r\n                                    return (\r\n                                        <div>{signalGroup+\" \"+signalPhase+\" \"+distributionType+\" \"+predictionType}\r\n                                            <XYPlot width={400} height={300} xType={\"linear\"} >\r\n                                                <HorizontalGridLines />\r\n                                                <VerticalGridLines />\r\n                                                <XAxis title={\"Tijd tot faseovergang (s)\"}/><YAxis title={\"MAE (s)\"}/>\r\n                                                {/*<XAxis title={\"Time before phase change (s)\"}/><YAxis title={\"MAE (s)\"}/>*/}\r\n                                                <LineMarkSeries data={transformed} size={2}/>\r\n                                            </XYPlot>\r\n                                        </div>\r\n                                    );\r\n                                });\r\n                            });\r\n                        });\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport TimeGraph from \"../visualizer/TimeGraph/TimeGraph\";\r\nimport DistributionSelector from \"../visualizer/Selector/DistributionSelector\";\r\nimport TimeBeforeChange from \"../visualizer/TimeBeforeChange/TimeBeforeChange\";\r\n\r\nexport default class VisualizerMenu extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            option: 1,\r\n            title: [\r\n                \"Visualization of phase durations for 2019-05-08 for each signalGroup and signalPhase\",\r\n                \"Frequency distributions for large test dataset (rendering can take some time)\",\r\n                \"Visualization of the prediction error for each time to phase change for large dataset\"\r\n            ],\r\n        };\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    onClick(direction){\r\n        let {option} = this.state;\r\n        if(direction === 0){\r\n            option--;\r\n            if(option < 0) option=2;\r\n        }\r\n        else{\r\n            option = (option+1)%3;\r\n        }\r\n        this.setState({\r\n            option: option,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let {title, option} = this.state;\r\n        return (\r\n            <div>\r\n            <div><button onClick={() => this.onClick(0)}>{\"<-\"}</button><div>{title[option]}</div><button onClick={() => this.onClick(1)}>{\"->\"}</button></div>\r\n                {option === 0 && <TimeGraph/>}\r\n                {option === 1 && <DistributionSelector />}\r\n                {option === 2 && <TimeBeforeChange/>}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport DistributionSelector from \"./visualizer/Selector/DistributionSelector.js\";\r\nimport TimeGraph from \"./visualizer/TimeGraph/TimeGraph.js\";\r\nimport TimeBeforeChange from \"./visualizer/TimeBeforeChange/TimeBeforeChange.js\";\r\nimport VisualizerMenu from \"./Menu/VisualizerMenu\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          {/*<TimeGraph/>*/}\r\n          {/*<DistributionSelector />*/}\r\n          {/*<TimeBeforeChange/>*/}\r\n          <VisualizerMenu/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}